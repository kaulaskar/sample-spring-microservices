name: Build and Deploy Java Microservice

on:
  push:
    branches:
      - master
      - develop
      

jobs:
  build:
    runs-on: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/checkout@v3
      - name: Install Java and Maven
        uses: actions/setup-java@v2
        with:
          java-version: '15'
          distribution: 'adopt'
          cache: maven
          

      - name: Build with Maven
        run: echo ${{github.workspace}}; cd ${{github.workspace}}/${{vars.SERVICE_NAME}} ; mvn clean package
      # - name: Generate build number
      #   uses: onyxmueller/build-tag-number@v1 
      #   with:
      #    token: ${{secrets.github_token}}    

      # - name: Print new build number
      #   run: echo "Build number is $BUILD_NUMBER"
      # - name: Output Run ID
      #   run: echo ${{ github.run_id }}
      # - name: Output Run Number
      #   run: echo ${{ github.run_number }}
      # - name: Commit id 
      #   run: |
      #     echo ${{ github.sha }}
      # - name: Declare some variables
      #   shell: bash
      #   run: |
      #     echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
      #     # echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_ENV"
      # - name: Another step
      #   run: |
      #     # echo "Branch: ${{ env.branch }}"
      #     echo "Sha: ${{ env.sha_short }}"      
      - name: creation of tag
        run: cd ${{github.workspace}}; echo "version=$(grep modelVersion pom.xml | grep -v -e '<?xml|~'| head -n 1 | sed 's/[[:space:]]//g' | sed -E 's/<.{0,1}modelVersion>//g' | awk '{print $1}')" >> "$GITHUB_ENV"
          
      - name: version of release 
        run: echo ${{ env.version }}

      - name: Docker permission 
        run: sudo chmod 777 /var/run/docker.sock

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      

      - name: Build Docker image
        run:  cd ${{github.workspace}}/${{vars.SERVICE_NAME}} ;sudo docker build -t ${{vars.SERVICE_NAME}} .

      - name: Log in to Docker registry
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}


      - name: Tagging the image
        # run: docker tag ${{vars.SERVICE_NAME}} ${{secrets.DOCKER_USERNAME}}/${{vars.SERVICE_NAME}}:${{ env.sha_short }}
        run: docker tag ${{vars.SERVICE_NAME}} ${{secrets.DOCKER_USERNAME}}/${{vars.SERVICE_NAME}}:${{ env.version }}
        

      - name: Push Docker image
        # run: docker push ${{secrets.DOCKER_USERNAME}}/${{vars.SERVICE_NAME}}:${{ env.sha_short }}
        run: docker push ${{secrets.DOCKER_USERNAME}}/${{vars.SERVICE_NAME}}:${{ env.version }}
  # deploy:
  #   runs-on: k8
  #   needs: build

  #   steps:
  #     - name: run k8 yaml file 
  #       run: cd /opt; sudo kubectl apply -f deployment.yaml 

        
